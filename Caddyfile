{
	servers {
		metrics
	}

	frankenphp {
		num_threads auto
	}
}

{$DOMAIN:localhost} {
	encode gzip

	header {
		Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
		Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: blob:; media-src 'self' blob:; connect-src 'self' wss: https:; worker-src 'self' blob:; frame-src 'none'; object-src 'none'; base-uri 'self'"
		X-Content-Type-Options "nosniff"
		X-Frame-Options "DENY"
		X-XSS-Protection "1; mode=block"
		Referrer-Policy "strict-origin-when-cross-origin"
		Permissions-Policy "geolocation=()"
		-Server
		-X-Powered-By
	}

	@static {
		path *.css *.js *.ico *.png *.jpg *.jpeg *.gif *.svg *.woff *.woff2 *.ttf *.eot *.mp4 *.webm *.mp3 *.wav
	}
	handle @static {
		header Cache-Control "public, max-age=31536000, immutable"
		root * public
		file_server
	}

	handle /vendor/* {
		header Cache-Control "public, max-age=2592000"
		root * public
		file_server
	}

	handle /build/* {
		header Cache-Control "public, max-age=31536000, immutable"
		root * public
		file_server
	}

	handle /api/* {
		header -Cache-Control
		header -Expires
		header Cache-Control "no-store, no-cache, must-revalidate"

		@cors_preflight {
			method OPTIONS
		}
		handle @cors_preflight {
			header Access-Control-Allow-Origin "*"
			header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
			header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With"
			header Access-Control-Max-Age "86400"
			respond "" 204
		}
		
		header Access-Control-Allow-Origin "*"
		header Access-Control-Allow-Credentials "true"
		
		php_server
	}

	@websocket {
		header Connection *Upgrade*
		header Upgrade websocket
	}
	handle @websocket {
		reverse_proxy localhost:6001
	}

	handle {
		php_server {
			index index.php
			
			try_files {path} {path}/ @php

			split .php
		}
	}

	@php {
		file {
			try_files {path} /index.php
		}
	}
	handle @php {
		php_server
	}

	handle_errors {
		@5xx expression {http.error.status_code} >= 500
		handle @5xx {
			respond "Internal Server Error" 500
		}
		
		@4xx expression {http.error.status_code} >= 400
		handle @4xx {
			respond "Not Found" 404
		}
	}

	log {
		output file /var/log/caddy/access.log {
			roll_size 100MB
			roll_keep 5
			roll_keep_for 720h
		}
		format json
		level INFO
	}
}

health.{$DOMAIN:localhost} {
	respond /health "OK" 200
	
	handle /metrics {
		metrics
	}
}

www.{$DOMAIN} {
	redir https://{$DOMAIN}{uri} permanent
}
